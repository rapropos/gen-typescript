{{ define "zod"}}

{{- $types := .Types }}
{{- $typeMap := .TypeMap }}

{{- $coreZxprMap := dict
    "string" "z.string()"
    "bool" "z.boolean()"
    "int" "z.number()"
    "int16" "z.number()"
    "int32" "z.number()"
    "int64" "z.number()"
    "uint" "z.number()"
    "uint16" "z.number()"
    "uint32" "z.number()"
    "uint64" "z.number()"
    "float32" "z.number()"
    "float64" "z.number()"
    "timestamp" "z.string()"
    "any" "z.any()"
}}

{{/* we need to get members defined before anything that uses them */}}
{{- $todoTypes := dict }}
{{- range $_, $t := $types }}
    {{ $_ := set $todoTypes $t.Name $t }}
{{- end }}

import {z} from "zod/v4";

{{- if $types }}
    {{- range $_i, $type := $types }}
	    {{- template "zodSchema" dict "Type" $type "TodoTypes" $todoTypes "TypeMap" $coreZxprMap }}
    {{- end }}
{{- end }}

{{- end }}
