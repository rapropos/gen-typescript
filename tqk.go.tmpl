{{define "tqk"}}

{{- $services := .Services -}}
{{- $typeMap := .TypeMap -}}

{{- if $services}}

/** TQK **/
import {queryOptions} from "@tanstack/react-query";

{{range $_, $service := $services }}
{{ $tqkDone := dict }}
{{ $watchers := dict }}

{{range $_, $method := $service.Methods}}
{{- if hasPrefix $method.Name "Watch"}}
{{- set $watchers (trimPrefix $method.Name "Watch") $method }}
{{- end }}

{{- if or (hasPrefix $method.Name "Ignore") $method.StreamOutput }}{{else}}
{{- $baseName := ternary (hasPrefix $method.Name "Watch") (trimPrefix $method.Name "Watch")
(ternary (hasPrefix $method.Name "Peek") (trimPrefix $method.Name "Peek") $method.Name)
}}
{{- $tsbn := firstLetterToLower $baseName}}
{{- if hasKey $tqkDone $baseName }}{{else}}

export const {{$tsbn}}Verb = "{{$baseName}}";

export interface {{$baseName}}Args {
{{- range $i, $input := $method.Inputs }}
    {{template "fieldName" dict "Field" $input}}
{{- if $input.Optional}}?{{end}}: {{template "type" dict "Type" $input.Type "TypeMap" $typeMap}};
{{- end }}
}

{{ if gt (len $method.Inputs) 0 }}
export function {{$tsbn}}Tqk(args: {{$baseName}}Args) {
    return [{{$tsbn}}Verb, args];
}
{{- else -}}
export const {{$tsbn}}Tqk = [{{$tsbn}}Verb];
{{- end }}
{{- set $tqkDone $baseName true}}
{{- end }}

{{- $tsmn := firstLetterToLower $method.Name}}
{{ if gt (len $method.Inputs) 0 }}
export function {{$tsmn}}Tqo(mama: {{$service.Name}}, args: {{$method.Name}}Args) {
    return queryOptions({
        queryKey: {{$tsbn}}Tqk(args),
        queryFn: () => mama.{{$tsmn}}(args),
    });
}
{{- else -}}
export function {{$tsmn}}Tqo(mama: {{$service.Name}}) {
    return queryOptions({
        queryKey: {{$tsbn}}Tqk,
        queryFn: () => mama.{{$tsmn}}(),
    });
}
{{ end }}
{{- end }}
{{- end }}

// it's necessary to know whether a setlist is single or multiple,
// because you cannot rely on whether the existing cache entry is an
// array or not. in the case where we subscribe to a list that is
// empty at the time of subscription, we have to know whether
// to fill it with an empty array or with null.

type Multiplicity = "single" | "multi";

const setlistVerbMultiplicities = new Map<string, Multiplicity>([
{{- range $verb, $method := $watchers }}
{{- $methrv := index $method.Outputs 0}}
    ["{{$verb}}", "{{ternary (eq $methrv.Type.Type.String "[]") "multi" "single"}}"],
{{- end }}
]);

import {QueryKey} from "@tanstack/query-core";

export function isSetlistTqkSingle(tqk: QueryKey) {
	return setlistVerbMultiplicities.get(tqk[0] as string) === "single";
}

{{- end }}
{{- end }}
{{- end }}
