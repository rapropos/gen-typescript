{{define "tqo"}}
// TQOTOP
{{- $watchMethod := .watchMethod }}
{{- $methodMap := .MethodMap }}
{{- $serviceName := .serviceName}}

{{- $baseName := trimPrefix $watchMethod.Name "Watch" }}
{{- $tsbn := firstLetterToLower $baseName }}

{{- $hasInput := gt (len $watchMethod.Inputs) 0}}

{{- $out := false }}
{{- $outTypeName := false }}
{{- $isOutSlice := false }}
{{- $isOutStub := false }}
{{- $isOutUncertain := false }}
{{- $outTypeBaseName := false }}
{{- $ribFetchFieldName := false }}
{{- $lastValidBackupMn := false }}
{{- $lastValidBackupExists := false }}
{{- $byIdWatcherMn := false }}
{{- $hasByIdWatcher := false }}
{{- $byIdWatcherMethod := false }}

{{- $hasOutput := gt (len $watchMethod.Outputs) 0}}
{{- if $hasOutput }}
{{-     $out = index $watchMethod.Outputs 0}}
{{-     $outTypeName = $out.Type.Expr }}
{{-     $isOutSlice = hasPrefix $outTypeName "[]"}}
{{-     $isOutStub = hasSuffix $outTypeName "Stub"}}
{{-     $isOutUncertain = $out.Optional }}
{{-     $outTypeBaseName = trimSuffix (trimPrefix $outTypeName "[]") "Stub" }}
{{-     $ribFetchFieldName = firstLetterToLower $outTypeBaseName }}
{{-     $lastValidBackupMn = print "LastValid" $baseName }}
{{-     $lastValidBackupExists = hasKey $methodMap $lastValidBackupMn }}
{{-     $byIdWatcherMn = print "Watch" $outTypeBaseName "ById" }}
{{-     $hasByIdWatcher = hasKey $methodMap $byIdWatcherMn }}
{{-     if $hasByIdWatcher }}
{{-         $byIdWatcherMethod = get $methodMap $byIdWatcherMn }}
{{-     end }}
{{- end }}

{{- if $isOutStub }}
// {{$outTypeName}} is a stub
{{-     if not $hasByIdWatcher }}
// WARNING: byIdWatcher {{$byIdWatcherMn}} for {{$baseName}} does not exist
{{-     else}}
{{-         if $isOutSlice }}
// {{$outTypeName}} is a slice
{{-             if $hasInput }}
// {{$baseName}} can take arguments
export function {{$tsbn}}Tqo(mama: {{$serviceName}}, args?: {{$baseName}}Args) {
    return queryOptions({
        queryKey: {{$tsbn}}Tqk(args),
        queryFn: args
            ? () => {{template "tqfn" dict "watchMethod" $watchMethod "MethodMap" $methodMap }}
            : skipToken,
    });
}

export function use{{$baseName}}(args?: {{$baseName}}Args) {
    const mama = useMothership();
	return useQuery({{$tsbn}}Tqo(mama, args));
}

export function useFull{{$baseName}}(args?: {{$baseName}}Args) {
    const mama = useMothership();
	const {data: stubs} = use{{$baseName}}(args);
	return useQueries({
        queries: (stubs ?? []).map(stub => {
            const ribArgs = {
                {{- $ribFetchFieldName}}Id: stub.id} as const;
            return {
                queryKey: {{$ribFetchFieldName}}ByIdTqk(ribArgs),
                queryFn: () => {{template "tqfn" dict "watchMethod" $byIdWatcherMethod "MethodMap" $methodMap "argsVarName" "ribArgs"}},
            };
        }),
        combine: mergeUseQueriesWithInfill,
    });
}
{{-             else }}{{/* no input */}}
// {{$baseName}} takes no args
export function {{$tsbn}}Tqo(mama: {{$serviceName}}) {
    return queryOptions({
        queryKey: {{$tsbn}}Tqk,
        queryFn: () => {{template "tqfn" dict "watchMethod" $watchMethod "MethodMap" $methodMap }},
    });
}

export function use{{$baseName}}() {
    const mama = useMothership();
	return useQuery({{$tsbn}}Tqo(mama));
}

export function useFull{{$baseName}}() {
    const mama = useMothership();
	const {data: stubs} = use{{$baseName}}();
	return useQueries({
        queries: (stubs ?? []).map(stub => {
            const ribArgs = {
                {{- $ribFetchFieldName}}Id: stub.id} as const;
            return {
                queryKey: {{$ribFetchFieldName}}ByIdTqk(ribArgs),
				queryFn: () => {{template "tqfn" dict "watchMethod" $byIdWatcherMethod "MethodMap" $methodMap "argsVarName" "ribArgs"}},
            };
		}),
		combine: mergeUseQueriesWithInfill,
    });
}
{{-             end }}
{{-         else }}{{/* not a slice */}}
// {{$outTypeName}} not a slice
{{-             if $hasInput}}
// {{$baseName}} can take args
export function {{$tsbn}}Tqo(mama: {{$serviceName}}, args ?: {{$baseName}}Args) {
    return queryOptions({
        queryKey: {{$tsbn}}Tqk(args),
        queryFn: args
            ? () => {{template "tqfn" dict "watchMethod" $watchMethod "MethodMap" $methodMap }}
        : skipToken,
    });
}

export function use{{$baseName}}(args ?: {{$baseName}}Args) {
    const mama = useMothership();
	return useQuery({{$tsbn}}Tqo(mama, args));
}

export function useFull{{$baseName}}(args ?: {{$baseName}}Args) {
    const mama = useMothership();
    const {data: stub} = use{{$baseName}}(args);
	const ribArgs = stub ? { {{$ribFetchFieldName}}Id: stub.id } as const : undefined;

	return useQuery({
		queryKey: {{$ribFetchFieldName}}ByIdTqk(ribArgs),
		queryFn: ribArgs
            ? () => {{ template "tqfn" dict "watchMethod" $byIdWatcherMethod "MethodMap" $methodMap "argsVarName" "ribArgs" }}
            : skipToken,
    });
}
{{-             else }}
// {{$baseName}} takes no arguments
export function {{$tsbn}}Tqo(mama: {{$serviceName}}) {
    return queryOptions({
        queryKey: {{$tsbn}}Tqk,
        queryFn: () => {{template "tqfn" dict "watchMethod" $watchMethod "MethodMap" $methodMap }},
    });
}

export function use{{$baseName}}() {
    const mama = useMothership();
	return useQuery({{$tsbn}}Tqo());
}

export function useFull{{$baseName}}() {
	const mama = useMothership();
    const {data: stub} = use{{$baseName}}();

    const ribArgs = stub ? { {{$ribFetchFieldName}}Id: stub.id } as const : undefined;
    return useQuery({
        queryKey: {{$ribFetchFieldName}}ByIdTqk(ribArgs),
        queryFn: ribArgs
		    ? () => {{ template "tqfn" dict "watchMethod" $byIdWatcherMethod "MethodMap" $methodMap "argsVarName" "ribArgs" }}
			: skipToken,
    });
}
{{-             end }}
{{-         end }}
{{-    end }}
{{- else}}{{/* not a stub */}}
// {{$outTypeBaseName}} is not a stub
{{-    if $hasInput }}
// {{$baseName}} can take args
export function {{$tsbn}}Tqo(mama: {{$serviceName}}, args ?: {{$baseName}}Args) {
    return queryOptions({
        queryKey: {{$tsbn}}Tqk(args),
        queryFn: args
            ? () => {{template "tqfn" dict "watchMethod" $watchMethod "MethodMap" $methodMap }}
            : skipToken,
    });
}

export function use{{$baseName}}(args ?: {{$baseName}}Args) {
	const mama = useMothership();
	return useQuery({{$tsbn}}Tqo(mama, args));
}
{{-    else }}
// {{$baseName}} takes no args
export function {{$tsbn}}Tqo(mama: {{$serviceName}}) {
	return queryOptions({
        queryKey: {{$tsbn}}Tqk,
        queryFn: () => {{template "tqfn" dict "watchMethod" $watchMethod "MethodMap" $methodMap }},
    });
}

export function use{{$baseName}}() {
    const mama = useMothership();
    return useQuery({{$tsbn}}Tqo(mama));
}
{{-    end }}
{{- end }}
// TQOOUT
{{- end }}